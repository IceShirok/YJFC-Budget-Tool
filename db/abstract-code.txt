/* ====================
YJFC Budget Tool
Abstract Code & SQL
http://www.tutorialspoint.com/sqlite/index.htm

Database Name: YjfcBudgetTool
==================== */

/* ===========
Notes:
GTID is always 9 characters long
UserType: PRESI, TRESU, ADMIN
CatName: ARMORY, TOURNAMENT, SOCIAL, PRELATIONS, EXECBOARD
Year: should be 2-digit number
Priority: 1=low, 2=medium, 3=high
Date: formatted as YYYY-MM-DD where year starts at YYYY-08-01 (Aug. 1)
=========== */


===== Logging In =====

// Get login information
gtid = read("GTID")
pw = read("Password")

// Validate login
isValid = SELECT GTID From User WHERE GTID=gtid AND Password=pw;

if (!isValid) {
    error("Invalid username or password. Try again or contact the DB admin.")
} else {
    /*
    not sure whether there will be certain privileges yet
    admin privileges: 
    - inserting actual money in bank
    - fixing mistakes in the database
    */
}


===== Add Budget Items =====
/* ===========
- For budget requests at beginning of year
- Also automatically done when a new budget item is entered in a transaction (see below)
=========== */

for (item in listofItems) {
    INSERT INTO BudgetItem Values(name, category, getCurrentYear(), estCost, estIncome, priority, explanation);
}

===== See Budget Summaries =====
// yearly report - all transactions listed
SELECT Date, Name, Category, Cost, Earned
    FROM Transactions
    WHERE Year=getCurrentYear
        AND Date BETWEEN beginDate AND endDate
    ORDER BY Date ASC, Category ASC, Name ASC;

// yearly report - total costs by category
SELECT Category, SUM(Cost), SUM(Earned)
    FROM Transactions
    WHERE Year=getCurrentYear
        AND Date BETWEEN beginDate AND endDate
        AND Category=myCat
    GROUP BY Category;
    
// yearly report - total amount spent and earned
SELECT SUM(Cost), SUM(Earned)
    FROM Transactions
    WHERE Year=getCurrentYear
        AND Date BETWEEN beginDate AND endDate;

// budget by category - all transactions listed
SELECT Date, Name, Cost, Earned
    FROM Transactions
    WHERE Year=getCurrentYear
        AND Date BETWEEN beginDate AND endDate
        AND Category=myCat
    ORDER BY Date ASC, Name ASC;
    
// budget by category - total amount spent and earned
SELECT SUM(Cost), SUM(Earned)
    FROM Transactions
    WHERE Year=getCurrentYear
        AND Date BETWEEN beginDate AND endDate
        AND Category=myCat;

// budget of the week - identical to yearly report
SELECT Date, Name, Category, Cost, Earned
    FROM Transactions
    WHERE Year=getCurrentYear
        AND Date BETWEEN sundayDate AND saturdayDate
    ORDER BY Date ASC, Category ASC, Name ASC;

SELECT SUM(Cost), SUM(Earned)
    FROM Transactions
    WHERE Year=getCurrentYear
        AND Date BETWEEN sundayDate AND saturdayDate;

// expected vs. actual money

// get the total difference from transactions
SELECT SUM(Cost), SUM(Earned) FROM Transactions WHERE Date BETWEEN beginDate AND endDate;
// take the difference and subtract from actual money in bank from start of said date
SELECT ActualTotal FROM TrueAccountStatus WHERE Date=beginDate;

// Shows actual money in bank at most recent date
SELECT ActualTotal, MAX(Date) FROM TrueAccountStatus;

// also note for inserting actual money in bank
INSERT INTO TrueAccountStatus VALUES (DATE('now'), 1000);


===== See SGA Trends =====
year = read("Year")
previousYear = getPreviousYear(year)

// constructing tables to form full outer join

CREATE VIEW CurrentYear AS SELECT * FROM SgaAllocation WHERE Year=year;
CREATE VIEW PreviousYear AS SELECT * FROM SgaAllocation WHERE Year=previousYear;

CREATE VIEW ProactiveYears AS
    SELECT CY.Name, CY.Category,
            PY.Requested AS PrevYearReq, PY.Approved AS PrevYearApp,
            CY.Requested AS CurrYearReq, CY.Approved AS CurrYearApp
        FROM CurrentYear AS CY LEFT OUTER JOIN PreviousYear AS PY
            ON CY.Name=PY.Name AND CY.Category=PY.Category;

CREATE VIEW RetroactiveYears AS
SELECT PY.Name, PY.Category,
        PY.Requested AS PrevYearReq, PY.Approved AS PrevYearApp,
        CY.Requested AS CurrYearReq, CY.Approved AS CurrYearApp
    FROM PreviousYear AS CY LEFT OUTER JOIN CurrentYear AS PY
        ON CY.Name=PY.Name AND CY.Category=PY.Category;

// get the full report
SELECT * FROM ProactiveYears UNION SELECT * FROM RetroactiveYears;


===== Enter A Transaction =====
// create dropdown of all categories
SELECT * FROM Category ORDER BY CatName ASC;

// create a dropdown of all names + input for other new names
SELECT DISTINCT Name FROM BudgetItem
    WHERE Category="Armory Committee"
    AND Year=getCurrentYear();

// automatically generated by system
date = getTimeStamp()
gtid = getUserGtid()

// get from user
name = read("Name")
category = read("Category")
cost = read("Cost")
earned = read("Earned")

// check if the transaction has existed before
if (name not in (SELECT Name FROM BudgetItem) {
    INSERT INTO BudgetItem VALUES (name, category, getCurrentYear, 0, 0, 0, "New item purchased.");
}

// any reimbursements?
reimbursementAmt = read("Reimbursement Amount")
if (reimbursementAmt != null) {
    INSERT INTO Reimbursement VALUES (name, category, year, amt, 50, DATE('now'), null);
}

insert into Transactions values (DATE('now'), name, category, getCurrentYear(), gtid, cost, earned, exmplanation);


===== Indicate Reimbursement Paid =====
// get reimbursement list
SELECT Name, Category, Year, Amt, DateReq FROM Reimbursement
    WHERE DateRec IS NULL,
    ORDER BY DateReq ASC, Category ASC, Name ASC;
    
// select a reimbursement and indicate which is reimbursemed
UPDATE Reimbursement SET DateRec=Date('now')
    WHERE Name=selectedName AND Category=selectedCat AND Year=selectedYear;


===== Reporting problem =====

// Get form information
gtid = getUserGtid()
desc = read("Description")
email(gtid, desc) to sysadmin
